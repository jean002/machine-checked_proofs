-- The binary relation g_o stands for the strict order <,
-- and the binary relation pw_o stands for the weak inequa-
-- lity <=.


constants {A : Type } (g_o : A → A → Prop)

def pw_o (x y : A) : Prop := ∀ w : A, (g_o w x → g_o w y) ∧ (g_o y w → g_o x w)
def asymmetric: Prop := ∀  x y : A, g_o x y → ¬ g_o y x
def g_transitive : Prop := ∀ x y z : A, (g_o x y ∧ g_o y z) → g_o x z
def positive_antisymmetric : Prop := (∀ x y : A, (pw_o x y ∧ pw_o y x) → x = y)
def g_ordered_type (A : Type) : Prop := asymmetric ∧ g_transitive ∧ positive_antisymmetric


theorem simple1: ∀ x y z : A, g_o x y ∧ pw_o y z → g_o x z :=

begin
   unfold pw_o,
   intros,
   cases a with h1 h2,
   let h3 : A := x,
   let h4 : (g_o x y → g_o x z) ∧ (g_o z x → g_o y x) := h2 x,
   apply (h4.left h1),
end

theorem simple2: ∀ x y z : A, pw_o y z ∧ g_o z x → g_o y x :=

begin
   unfold pw_o,
   intros,
   cases a with h1 h2,
   let h3 : A := x,
   let h4 : (g_o x y → g_o x z) ∧ (g_o z x → g_o y x) := h1 x,
   apply (h4.right h2),
end


theorem simple3: ∀ x y z : A, pw_o x y ∧ pw_o y z → pw_o x z :=

begin
   
   intros,
   cases a with h1 h2,
   unfold pw_o,
   intro,
   split,
   intro,
     apply simple1,
     split,
     apply simple1,
     split,
     exact a,
     exact h1,
     exact h2,
   intro,
     apply simple2,
     split,
     exact h1,
     apply simple2,
     split,
     exact h2,
     exact a,
end

theorem simple4: ∀ x y : A, g_transitive → g_o x y → pw_o x y :=

begin
   unfold pw_o g_ordered_type,
   intros,
   split,
   intro,
     apply a,
     split,
     exact a_2,
     exact a_1, 
   intro,
     apply a,
     split,
     exact a_1,
     exact a_2,
end

--Another weak inequality defined on a generalized ordered type follows:

def nw_o (x y : A) : Prop := ¬ g_o y x

theorem simple5: ∀ x : A, asymmetric → nw_o x x :=

begin
   unfold nw_o asymmetric,
   intros,
   intro,
   apply a,
   exact a_1,
   exact a_1,
end

theorem simple6: ∀ x y : A, asymmetric → pw_o x y → nw_o x y :=

begin
   unfold nw_o,
   intros,
   intro,
   let h1 : g_o y y,
   apply simple1,
   split,
   exact a_2,
   exact a_1,
   apply simple5,
   exact a,
   exact h1,
end

def cotransitivity : Prop := ∀ x y z : A, g_o x y → g_o x z ∨ g_o z y 


theorem simple7: cotransitivity → ∀ x y : A, nw_o x y → pw_o x y :=

begin
   unfold pw_o,
   intros,
   split,
   intro,
     let h1 : g_o w x → g_o w y ∨ g_o y x,
     apply (a w x y),
     let h2 : g_o w y ∨ g_o y x,
     apply (h1 a_2),
     destruct h2,
     intro,
       exact h,
     intro,
       let h3 : false,
       apply (a_1 h),
       contradiction,
   intro,
     let h4 : g_o y x ∨ g_o x w,
     apply (a y w x),
     assumption,
     destruct h4,
     intro,
       let h5 : false := a_1 h,
       contradiction,
     intro,
       assumption,
end

def negative_antisymmetry : Prop := ∀ x y : A, nw_o x y ∧ nw_o y x → x = y


theorem simple8: asymmetric → negative_antisymmetry → positive_antisymmetric :=

begin
  unfold negative_antisymmetry positive_antisymmetric,
  intros,
  apply (a_1 x y),
  split,
  apply simple6,
    assumption,
    exact a_2.left,
  apply simple6,
    assumption,
    exact a_2.right,
end

theorem simple9: asymmetric → cotransitivity → g_transitive :=

begin
  unfold asymmetric cotransitivity g_transitive,
  intros,
  let h1 : g_o x y → g_o x z ∨ g_o z y := a_1 x y z,
  let h2 : g_o x z ∨ g_o z y := h1 a_2.left,
  destruct h2,
  intro,
    assumption,
  intro,
    let h3 : g_o y z → ¬ g_o z y := a y z,
    let h4 : ¬ g_o z y := h3 a_2.right,
    contradiction,
end

-- We show that Prop is a generalized ordered type. We first define
-- a binary relation on Prop.

def g_o_1 (p q : Prop) : Prop := ¬ p ∧ q

-- The following weak inequality is a special case of "pw_o" defined above.

def pw_o_1 (p q : Prop) : Prop := ∀ r : Prop, (g_o_1 r p → g_o_1 r q) ∧ (g_o_1 q r → g_o_1 p r)

-- We introduce the univalence axiom for Prop. For more on the univalence axiom
-- see https://homotopytypetheory.org/book/.

axiom univalence_for_Prop : ∀ p q : Prop, (p → q) ∧ (q → p) → p = q 

theorem simple10_asymmetry : ∀ p q : Prop, g_o_1 p q → ¬ g_o_1 q p := 

begin
  unfold g_o_1,
  intros,
  intro,
  apply (a.left a_1.right),
end

theorem simple11_g_transitivity : ∀ p q r : Prop, g_o_1 p q → g_o_1 q r → g_o_1 p r :=

begin
  unfold g_o_1,
  intros,
  split,
  exact a.left,
  exact a_1.right,
end

lemma simple12: ∀ p q : Prop, pw_o_1 p q → (p → q) :=

begin
  unfold pw_o_1,
  intros,
  let h : Prop := false,
  let h1 : (g_o_1 false p → g_o_1 false q) ∧ (g_o_1 q false → g_o_1 p false) := a h,
  let h2 : ¬ false ∧ p,
  split,
  intro,
    contradiction,
  assumption,
  let h3 : g_o_1 false q := h1.left h2,
  exact h3.right,
end

lemma simple13: ∀ p q : Prop, (pw_o_1 p q ∧ pw_o_1 q p) → ((p → q) ∧ (q → p)) :=

begin
  intros,
  split,
  apply simple12,
    exact a.left,
  apply simple12,
    exact a.right,
end

-- We need the univalence axiom for Prop to prove the following.

theorem simple14_positive_antisymmetry: ∀ p q : Prop, (pw_o_1 p q ∧ pw_o_1 q p) → p = q :=

begin
  intros,
  let h : (p → q) ∧ (q → p) := simple13 p q a,
  apply univalence_for_Prop p q h,
end

def LEM : Prop := ∀ p : Prop, p ∨ ¬ p

theorem simple15: (∀ r p q : Prop, g_o_1 p q → g_o_1 p r ∨ g_o_1 r q) → LEM :=

begin
  intros,
  unfold LEM,
  intro,
  let h : g_o_1 false true,
  let h1 : ¬ false,
  contradiction,
  let h2 : true,
  trivial,
  split,
  assumption,
  assumption,
  let h3 : g_o_1 false true → g_o_1 false p ∨ g_o_1 p true := a p false true,
  let h4 : g_o_1 false p ∨ g_o_1 p true := h3 h,
  destruct h4,
  intro,
    apply or.inl h_1.right,
  intro,
    apply or.inr h_1.left,
end


    

   
